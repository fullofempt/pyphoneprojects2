import os
import re
from PIL import Image
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

class DataPreprocessor:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Data Preprocessor - –£–º–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        self.root.geometry("800x600")
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, text="–£–º–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=10)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
        frame1 = ttk.Frame(self.root)
        frame1.pack(pady=10, fill='x', padx=20)
        
        ttk.Label(frame1, text="–ì–ª–∞–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:").pack(anchor='w')
        
        self.data_dir_var = tk.StringVar()
        entry_frame = ttk.Frame(frame1)
        entry_frame.pack(fill='x', pady=5)
        
        ttk.Entry(entry_frame, textvariable=self.data_dir_var, width=60).pack(side='left', fill='x', expand=True)
        ttk.Button(entry_frame, text="–û–±–∑–æ—Ä", command=self.browse_directory).pack(side='right', padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        ttk.Button(self.root, text="üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö", 
                  command=self.analyze_structure).pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        self.info_frame = ttk.LabelFrame(self.root, text="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        self.info_frame.pack(pady=10, fill='x', padx=20)
        
        self.info_label = ttk.Label(self.info_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", wraplength=700)
        self.info_label.pack(pady=10, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.process_btn = ttk.Button(self.root, text="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã", 
                  command=self.add_prefixes, state='disabled', style='Accent.TButton')
        self.process_btn.pack(pady=20)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(self.root, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        log_frame.pack(pady=10, fill='both', expand=True, padx=20)
        
        self.log_text = tk.Text(log_frame, height=15, width=80)
        scrollbar = ttk.Scrollbar(log_frame, orient='vertical', command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side='left', fill='both', expand=True, padx=5, pady=5)
        scrollbar.pack(side='right', fill='y', pady=5)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
        style = ttk.Style()
        style.configure('Accent.TButton', foreground='white', background='#007acc')
    
    def browse_directory(self):
        """–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directory = filedialog.askdirectory()
        if directory:
            self.data_dir_var.set(directory)
            self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
            self.analyze_structure()
    
    def log_message(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def analyze_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        data_dir = self.data_dir_var.get()
        if not data_dir or not os.path.exists(data_dir):
            return
        
        self.log_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        
        # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å –∫–æ—à–∫–∞–º–∏ –∏ —Å–æ–±–∞–∫–∞–º–∏
        cat_folders = []
        dog_folders = []
        other_folders = []
        
        for item in os.listdir(data_dir):
            item_path = os.path.join(data_dir, item)
            if os.path.isdir(item_path):
                lower_item = item.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –∫ –∫–æ—à–∫–∞–º
                if any(keyword in lower_item for keyword in ['cat', '–∫–æ—Ç', '–∫–æ—à', '–∫–∏—Å']):
                    cat_folders.append(item)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –∫ —Å–æ–±–∞–∫–∞–º
                elif any(keyword in lower_item for keyword in ['dog', '—Å–æ–±–∞–∫', '–ø—ë—Å', '–ø–µ—Å', '—â–µ–Ω']):
                    dog_folders.append(item)
                else:
                    other_folders.append(item)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_text = ""
        
        if cat_folders:
            info_text += f"üê± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞–ø–∫–∏ —Å –∫–æ—à–∫–∞–º–∏: {', '.join(cat_folders)}\n"
        if dog_folders:
            info_text += f"üê∂ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞–ø–∫–∏ —Å —Å–æ–±–∞–∫–∞–º–∏: {', '.join(dog_folders)}\n"
        if other_folders:
            info_text += f"üìÅ –î—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏: {', '.join(other_folders)}\n"
        
        if not cat_folders and not dog_folders:
            info_text = "‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –∫–æ—à–∫–∞–º–∏ –∏–ª–∏ —Å–æ–±–∞–∫–∞–º–∏. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–∏–ø–∞ 'Cat', 'Cats', 'Dog', 'Dogs' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            self.process_btn.config(state='disabled')
        else:
            self.process_btn.config(state='normal')
        
        self.info_label.config(text=info_text)
        self.log_message(info_text)
    
    def add_prefixes(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–∞—Ö"""
        data_dir = self.data_dir_var.get()
        if not data_dir or not os.path.exists(data_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏")
            return
        
        try:
            self.log_message("=" * 50)
            self.log_message("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤...")
            
            total_processed = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for folder_name in os.listdir(data_dir):
                folder_path = os.path.join(data_dir, folder_name)
                
                if os.path.isdir(folder_path):
                    lower_folder = folder_name.lower()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞–ø–∫–∏
                    prefix = None
                    if any(keyword in lower_folder for keyword in ['cat', '–∫–æ—Ç', '–∫–æ—à', '–∫–∏—Å']):
                        prefix = 'cat'
                    elif any(keyword in lower_folder for keyword in ['dog', '—Å–æ–±–∞–∫', '–ø—ë—Å', '–ø–µ—Å', '—â–µ–Ω']):
                        prefix = 'dog'
                    
                    if prefix:
                        processed = self.process_folder(folder_path, prefix, folder_name)
                        total_processed += processed
            
            self.log_message("=" * 50)
            self.log_message(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–µ—Ñ–∏–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def process_folder(self, folder_path, prefix, folder_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫ —Ñ–∞–π–ª–∞–º"""
        processed_count = 0
        file_number = 1
        
        self.log_message(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {folder_name} ‚Üí –ø—Ä–µ—Ñ–∏–∫—Å: '{prefix}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        for filename in os.listdir(folder_path):
            file_path = os.path.join(folder_path, filename)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            if os.path.isdir(file_path):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.jfif', '.webp')):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                lower_filename = filename.lower()
                if lower_filename.startswith(prefix + '_'):
                    self.log_message(f"   ‚úì –£–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å: {filename}")
                    processed_count += 1
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                try:
                    extension = os.path.splitext(filename)[1]
                    new_name = f"{prefix}_{file_number:04d}{extension}"
                    new_path = os.path.join(folder_path, new_name)
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    os.rename(file_path, new_path)
                    
                    self.log_message(f"   ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {filename} ‚Üí {new_name}")
                    processed_count += 1
                    file_number += 1
                    
                except Exception as e:
                    self.log_message(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {filename}: {e}")
        
        self.log_message(f"   üìä –í –ø–∞–ø–∫–µ '{folder_name}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Ñ–∞–π–ª–æ–≤")
        return processed_count

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    app = DataPreprocessor()
    app.root.mainloop()